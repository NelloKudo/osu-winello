#!/usr/bin/env bash

## Welcome to your osu! launch script!
## Most stuff here is explained with comments, but if you just need to add
## any argument before osu!, use #LAUNCH_ARGS!

# For reference: export A="${A:-}" means use "A" if already set, otherwise use the value after ":-" for the variable
# Example: enable WINENTSYNC by running `WINENTSYNC=1 osu-wine` in a terminal,
#                            or by changing the line to `export WINENTSYNC="${WINENTSYNC:-1}"`

# Customization and and performance configuration options are here:

LAUNCH_ARGS="" # Put arguments like prime-run, gamemoderun, or mangohud in between the quotes here!

# Set this to your external disk paths if you use symlinks!
export PRESSURE_VESSEL_FILESYSTEMS_RW="${PRESSURE_VESSEL_FILESYSTEMS_RW:-}"

# Set this to 1 or 2 to play with absolute mode in OTD on Wayland (if this doesn't work, check the "Tablet issues" page in the osu-winello wiki)
export WINE_ENABLE_ABS_TABLET_HACK="${WINE_ENABLE_ABS_TABLET_HACK:-0}"
# Set this to 1 to enable Windows fonts/boss key, but it might cause crashes in future updates! Revert back if so.
export WINE_BLOCK_GET_VERSION="${WINE_BLOCK_GET_VERSION:-0}"
# Set this to 1 to force fixes for alt-tab (only if needed!)
export WINE_ENABLE_OSU_FOCUS_FIX="${WINE_ENABLE_OSU_FOCUS_FIX:-0}"

# Enables NTsync (when possible, requires Linux >=6.14 or the DKMS module installed)
export WINENTSYNC="${WINENTSYNC:-0}"
# Enables Fsync (when possible)
export WINEFSYNC="${WINEFSYNC:-1}"
# Enables Esync (when possible)
export WINEESYNC="${WINEESYNC:-1}"

# Uncomment the line below to try the native winewayland.drv driver (unsupported, but feel free to experiment if you're on Wayland)
# export DISPLAY=

# Set custom logging channels for Wine
export WINEDEBUG="${WINEDEBUG:-}"

# Disables vsync for mesa
export vblank_mode="${vblank_mode:-0}"
# Put true after :- to enable threaded OpenGL optimizations for AMD/Intel
# (unsupported, use at your own risk! May INCREASE FPS, but may also INCREASE input latency due to multithreading overhead)
export mesa_glthread="${mesa_glthread:-}"

# Disables vsync for NVIDIA >=510
export __GL_SYNC_TO_VBLANK="${__GL_SYNC_TO_VBLANK:-0}"
# Put 1 after :- to enable threaded OpenGL optimizations for NVIDIA
# (unsupported, use at your own risk! May INCREASE FPS, but may also INCREASE input latency due to multithreading overhead)
export __GL_THREADED_OPTIMIZATIONS="${__GL_THREADED_OPTIMIZATIONS:-}"
# Put 1 after :- to minimize the pre-rendered frames for NVIDIA (driver default is 2, 0 does nothing)
# (unsupported, use at your own risk! Will LOWER FPS for a slightly LOWER input latency)
export __GL_MaxFramesAllowed="${__GL_MaxFramesAllowed:-}"

###################################################################################################
# osu-winello internal variables, you probably don't have to touch these!
###################################################################################################

export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export BINDIR="${BINDIR:-$HOME/.local/bin}"

export WINE="$XDG_DATA_HOME/osuconfig/yawl-winello"
export WINESERVER="${WINE}server"
export WINEPREFIX="$XDG_DATA_HOME/wineprefixes/osu-wineprefix"
export WINE_INSTALL_PATH="$XDG_DATA_HOME/osuconfig/wine-osu"

export WINETRICKS="$XDG_DATA_HOME/osuconfig/winetricks"

export WINEDLLOVERRIDES="winemenubuilder.exe=;" # Blocks wine from creating .desktop files

IFS=" " read -r -a PRE_ARGS <<<"env ${LAUNCH_ARGS}"

LAUNCHERPATH="$(realpath "$0")"
export LAUNCHERPATH

[ -r "$XDG_DATA_HOME/osuconfig/osupath" ] && OSUPATH=$(</"$XDG_DATA_HOME/osuconfig/osupath")
export OSUPATH

# Get the Windows-formatted paths to osu! and its install directory
[ -r "$XDG_DATA_HOME/osuconfig/.osu-path-winepath" ] && read -r OSU_WINEDIR <<<"$(cat "$XDG_DATA_HOME/osuconfig/.osu-path-winepath")"
[ -r "$XDG_DATA_HOME/osuconfig/.osu-exe-winepath" ] && read -r OSU_WINEEXE <<<"$(cat "$XDG_DATA_HOME/osuconfig/.osu-exe-winepath")"

###################################################################################################
# Helper functions for the launcher script
###################################################################################################

Info() {
    echo -e '\033[1;34m'"Winello:\033[0m $*"
}

Warning() {
    echo -e '\033[0;33m'"Winello:\033[0m $*"
}

ErrorAndExit() {
    echo -e '\033[1;31m'"Script failed:\033[0m $*"
    exit 1
}

Help() {
    Info "Script features:
    osu-wine: Runs osu!
    osu-wine --winecfg : Runs winecfg on the osu! Wineprefix
    osu-wine --winetricks: Install packages on osu! Wineprefix
    osu-wine --regedit: Opens regedit on osu! Wineprefix
    osu-wine --kill: Kills osu! and related processes in osu! Wineprefix
    osu-wine --kill9: Kills osu! but with wineserver -k9
    osu-wine --update: Updates proton-osu (and optionally, the osu-wine script) to upstream
    osu-wine --fixprefix: Reinstalls the osu! Wineprefix from system
    osu-wine --fix-yawl: Reinstalls files related to yawl and the Steam Runtime in case something went wrong
    osu-wine --fixfolders: Reinstalls registry keys for native file manager in case they break
    osu-wine --fixrpc: Reinstalls rpc-bridge if needed!
    osu-wine --info: Troubleshooting and more info
    osu-wine --remove: Uninstalls osu! and the script
    osu-wine --changedir: Changes directory of the install according to the user
    osu-wine --devserver <address>: Runs osu with an alternative server (e.g. --devserver akatsuki.gg)
    osu-wine --runinprefix <file>: Launches a custom executable within osu!'s Wineprefix
    osu-wine --osuhandler <beatmap, skin..>: Launches osu-handler-wine with the specified file/link
    osu-wine --gosumemory: Installs and runs gosumemory without any needed config!
    osu-wine --tosu: Installs and runs tosu without any needed config!
    osu-wine --disable-memory-reader: Turn off gosumemory and tosu"
}

# Won't return failure if there's no internet connection, but tries to update the main script first before calling the function
cleanUpdateFolder() {
    _clone() { GIT_TERMINAL_PROMPT=0 git clone "https://github.com/NelloKudo/osu-winello.git" "$XDG_DATA_HOME/osuconfig/update" --quiet 2>/dev/null; }
    _pull() { GIT_TERMINAL_PROMPT=0 git -C "$XDG_DATA_HOME/osuconfig/update" pull --quiet 2>/dev/null; }
    _reset() { GIT_TERMINAL_PROMPT=0 git -C "$XDG_DATA_HOME/osuconfig/update" reset --hard "${1:-HEAD}" --quiet 2>/dev/null; }

    if [ ! -d "$XDG_DATA_HOME/osuconfig/update" ]; then
        _clone # where did the update directory go? need to clone it first.
    else
        _pull || { { _reset || _reset origin || _reset main; } && _pull; } # I think this should handle when a branch is deleted/main branch changes?
    fi
    _reset
    # check again, doesn't hurt
    [ ! -d "$XDG_DATA_HOME/osuconfig/update" ] && return 1
    return 0
}

MainUpdate() {
    cleanUpdateFolder || ErrorAndExit "Your osu-winello folder is broken, please reinstall from scratch..."

    # if no arguments are passed, just do a regular update
    # if we're updating ourselves, we should use `exec` so that we don't try to re-enter the changed launcher script
    local args=("update" "${LAUNCHERPATH}")
    local execcmd=("exec" "bash")
    [ -n "${*}" ] && { args=("${*}") && execcmd=("bash"); } # we had arguments, pass those on and don't need `exec`
    "${execcmd[@]}" "$XDG_DATA_HOME/osuconfig/update/osu-winello.sh" "${args[@]}"
    return $?
}

SetupReader() {
    local READER_NAME="${1}"
    [ ! -d "$XDG_DATA_HOME/osuconfig/$READER_NAME" ] && { MainUpdate "$READER_NAME" || return 1; }

    Info "Setting up $READER_NAME wrapper..."
    READER_PATH="$(WINEDEBUG=-all "$WINE" winepath -w "$XDG_DATA_HOME/osuconfig/$READER_NAME/$READER_NAME.exe")"

    # launcher batch file to open tosu/gosumemory together with osu in the container
    cat >"$OSUPATH/launch_with_memory.bat" <<EOF
@echo off
set NODE_SKIP_PLATFORM_CHECK=1
cd /d "$OSU_WINEDIR"
start "" "$OSU_WINEEXE" %*
start /b "" "$READER_PATH"
EOF

    Info "$READER_NAME wrapper enabled. Launch osu! normally to use it!"
    return 0
}

LaunchWine() {
    local EXE_ARG="${WINE}"
    declare -a POST_ARGS=("${@}")

    WINELLO_LOGS_PATH="${XDG_DATA_HOME}/osuconfig/winello.log"
    Info "The run log is located in ${WINELLO_LOGS_PATH}. Attach this file if you make an issue on GitHub or ask for help on Discord."
    Info "Launching: ${PRE_ARGS[*]} ${EXE_ARG} ${POST_ARGS[*]}"
    echo ""
    exec "${PRE_ARGS[@]}" "${EXE_ARG}" "${POST_ARGS[@]}" &>"${WINELLO_LOGS_PATH}" || return 1
    return 0
}

LaunchOsu() {
    Info "Opening: $OSUPATH/osu!.exe"
    if [ -f "${OSUPATH}/launch_with_memory.bat" ]; then
        if command -v pgrep &>/dev/null; then
            { pgrep 'osu!.exe' &>/dev/null; } || $WINESERVER -k # stop lingering tosu process if any
        fi
        OSU_EXE=("${OSU_WINEDIR}launch_with_memory.bat")
        Info "Click here to open the tosu/gosumemory page: http://localhost:24050 or http://127.0.0.1:24050"
    else
        OSU_EXE=("C:\\windows\\system32\\start.exe" "/b" "${OSU_WINEEXE}")
    fi

    export WINEDEBUG="+timestamp,+pid,+tid,+threadname,+debugstr,+loaddll,+winebrowser,+exec ${WINEDEBUG:-}"
    LaunchWine "${OSU_EXE[@]}" "${@}" || return 1
    return 0
}

###################################################################################################
# Begin argument handling
###################################################################################################

case "$1" in
'')
    LaunchOsu
    ;;

    ###################################################################################################

'--devserver')
    if [ -z "$2" ]; then ErrorAndExit "You need to specify a server, e.g. --devserver akatsuki.gg"; fi
    LaunchOsu "-devserver" "$2"
    ;;

    ###################################################################################################

'--regedit')
    LaunchWine regedit
    ;;

    ###################################################################################################

'--winecfg')
    LaunchWine winecfg
    ;;

    ###################################################################################################

'--winetricks')
    [ ! -x "$XDG_DATA_HOME/osuconfig/winetricks" ] && { MainUpdate "installwinetricks" || ErrorAndExit "Couldn't install winetricks..."; }
    "$WINETRICKS" "${@:2}" || ErrorAndExit "Your winetricks command completed with errors..."
    ;;

    ###################################################################################################

'--changedir')
    MainUpdate "changedir" || ErrorAndExit "Changing directories failed..."
    ;;

    ###################################################################################################

'--remove')
    MainUpdate "uninstall" || ErrorAndExit "You may have to uninstall/remove the folders manually..."
    ;;

    ###################################################################################################

'--kill')
    "$WINESERVER" -k
    ;;

    ###################################################################################################

'--kill9')
    "$WINESERVER" -k9
    ;;

    ###################################################################################################

'--update')
    MainUpdate || ErrorAndExit "The update partially or completely failed..."
    ;;

    ###################################################################################################

'--fixfolders')
    MainUpdate "fixfolders" || ErrorAndExit "The folderfix somehow failed to apply..."
    ;;

    ###################################################################################################

*fix*yawl*)
    MainUpdate "fixyawl" || ErrorAndExit "yawl may not have been fixed..."
    ;;

    ###################################################################################################

'--fixrpc')
    MainUpdate "discordrpc" || ErrorAndExit "The Discord RPC bridge installation completed with errors..."
    ;;

    ###################################################################################################

'--osuhandler')

    OSUHANDLERPATH="$XDG_DATA_HOME/osuconfig/osu-handler-wine"

    Info "Trying to load your file/link.."
    case "$2" in
    *.osr)
        "$OSUHANDLERPATH" 'C:\\windows\\system32\\start.exe' /ProgIDOpen osustable.File.osr "$2"
        ;;
    *.osz)
        "$OSUHANDLERPATH" 'C:\\windows\\system32\\start.exe' /ProgIDOpen osustable.File.osz "$2"
        ;;
    *.osk)
        "$OSUHANDLERPATH" 'C:\\windows\\system32\\start.exe' /ProgIDOpen osustable.File.osk "$2"
        ;;
    *.osz2)
        "$OSUHANDLERPATH" 'C:\\windows\\system32\\start.exe' /ProgIDOpen osustable.File.osz2 "$2"
        ;;
    osu://*)
        "$OSUHANDLERPATH" 'C:\\windows\\system32\\start.exe' "$2"
        ;;
    *)
        Info "Unsupported osu! file.."
        ;;
    esac

    ;;

    ###################################################################################################

'--fixprefix')
    MainUpdate "fixprefix" ||
        ErrorAndExit "The prefix setup completed with issues... It might have worked, though, so try osu!, or --fixprefix again if it didn't work."
    ;;

    ###################################################################################################

'--tosu')
    SetupReader 'tosu' || ErrorAndExit "Couldn't set up tosu..."
    ;;
'--gosumemory')
    SetupReader 'gosumemory' || ErrorAndExit "Couldn't set up gosumemory..."
    ;;

    ###################################################################################################

'--disable-memory-reader')
    if [ -f "$OSUPATH/launch_with_memory.bat" ]; then
        rm "$OSUPATH/launch_with_memory.bat"
        Info "Memory reader wrapper disabled."
    else
        Info "No memory reader wrapper was enabled."
    fi
    ;;

    ###################################################################################################

'--info')
    Info "Need info?:
    Wineprefix location: $WINEPREFIX
    osu! folder: '$OSUPATH'

    If you need to add more options to osu!, check the Launch function of the script (ex. nano $BINDIR/osu-wine)
    You can run 'osu-wine --help' to see all the script's functions (fix prefix, change dir etc.)
    You can find more troubleshooting and info at here: https://osu.ppy.sh/community/forums/topics/1248084?n=1

    If you get an error like 'Runtime Platform missing or download incomplete', try running 'osu-wine --fix-yawl'."
    ;;

    ###################################################################################################

*help*)
    Help
    ;;
*)
    Info "Unknown argument: ${1}"
    Help
    ;;
esac
